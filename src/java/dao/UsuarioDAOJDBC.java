package dao;

import modelo.Usuario;
import dao.UsuarioDAO;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Array;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Resource;
import javax.enterprise.context.Dependent;

import javax.sql.DataSource;

@Dependent
@UsuarioDAOJdbc
public class UsuarioDAOJDBC implements UsuarioDAO, Serializable {
    private static final String dbTable="Usuarios";
    private static final String[] autoField={"id"}; //Autogenerated field for new records
    private static final String SQL_BUSCAID="SELECT * FROM Usuarios where id=?";
    private static final String SQL_BUSCADNI="SELECT * FROM Usuarios where dni=?";
    private static final String SQL_BUSCATODOS="SELECT * FROM Usuarios";
    private static final String SQL_CREA="INSERT INTO Usuarios (nombre,dni,apellidos,mail,password) VALUES (?,?,?,?,?)";
    private static final String SQL_ACTUALIZA="UPDATE Usuarios set NOMBRE=?, DNI=?, APELLIDOS=?, MAIL=?, PASSWORD=? WHERE id=?";
    private static final String SQL_BORRA="DELETE FROM Usuarios WHERE id=?";
    private static final String SQL_INSERTA_ROL="INSERT INTO ROLES (ROLNAME,DNIUSER) VALUES (?,?)";
    private static final String SQL_GETPARTICIPANTES = "SELECT * FROM USUARIOS WHERE ID IN (?)";
   
    @Resource(lookup="jdbc/rutas")
    private DataSource ds;
    
    public UsuarioDAOJDBC() {
    }
    
    private static Usuario usuarioMapper(ResultSet rs) throws SQLException {
        Usuario u;
        u = new Usuario (
                rs.getInt("id"),
                rs.getString("nombre"),
                rs.getString("dni"),
                rs.getString("apellidos"),
                rs.getString("mail")
        );
        return u;
    }  
   
    public Usuario buscaDNI(String dni){
        Usuario u=null;
        try (Connection conn=ds.getConnection();
             PreparedStatement stmn=conn.prepareStatement(SQL_BUSCADNI)) {
            stmn.setString(1,dni);
            try( ResultSet rs=stmn.executeQuery()) {
                rs.next();
                u=usuarioMapper(rs);                
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return u;
    }
    
    @Override
    public Usuario buscaId(Integer id) {
        Usuario u=null;
        try (Connection conn=ds.getConnection();
             PreparedStatement stmn=conn.prepareStatement(SQL_BUSCAID)) {
            stmn.setInt(1,id);
            try( ResultSet rs=stmn.executeQuery()) {
                rs.next();
                u=usuarioMapper(rs);                
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return u;
    }

    @Override
    public List<Usuario> buscaTodos() {
        List<Usuario> l=new ArrayList<>();
        try (Connection conn=ds.getConnection();
            Statement stmn=conn.createStatement();
            ResultSet rs=stmn.executeQuery(SQL_BUSCATODOS);
        ){
            while (rs.next()) {
                l.add(usuarioMapper(rs));
            }                
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return l;
    }
    
    private static String sha256(String base) {
    try{
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(base.getBytes("UTF-8"));
        StringBuffer hexString = new StringBuffer();

        for (int i = 0; i < hash.length; i++) {
            String hex = Integer.toHexString(0xff & hash[i]);
            if(hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }

        return hexString.toString();
    } catch(Exception ex){
       throw new RuntimeException(ex);
    }
}

    @Override
    public boolean crea(Usuario u) {
        boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_CREA,autoField);
            PreparedStatement stmn2 = conn.prepareStatement(SQL_INSERTA_ROL);
        ){
            stmn.setString(1,u.getNombre());
            stmn.setString(2,u.getDni());
            stmn.setString(3, u.getApellidos());
            stmn.setString(4, u.getMail());
            stmn.setString(5, sha256(u.getPassword()));
            stmn.executeUpdate();
            stmn2.setString(1,"user");
            stmn2.setString(2,u.getDni());
            stmn2.executeUpdate();
            try (ResultSet rs=stmn.getGeneratedKeys()) {
                //Get autogenerated field value
                if (rs!=null && rs.next()) {
                    int nuevoId=rs.getInt(1); //RS has only one field with key value
                    u.setId(nuevoId);
                }
            } catch (Exception ex) {
                Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }

    @Override
    public boolean guarda(Usuario u) {
        boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_ACTUALIZA);
        ){
            stmn.setString(1,u.getNombre());
            stmn.setString(2,u.getDni());
            stmn.setString(3, u.getApellidos());
            stmn.setString(4,u.getMail());
            stmn.setString(5,sha256(u.getPassword()));
            stmn.setInt(6, u.getId());
            result=(stmn.executeUpdate()==1);
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }
    
    @Override    
    public boolean borra(Integer id) {
        boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_BORRA);
        ){
            stmn.setInt(1,id);
            result=(stmn.executeUpdate()==1);
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }         
        return result;
    }
}
