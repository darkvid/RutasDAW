package dao;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Resource;
import javax.enterprise.context.Dependent;
import javax.naming.Context;
import javax.naming.InitialContext;

import javax.sql.DataSource;
import modelo.GeoPoint;
import modelo.Ruta;

@Dependent
public class RutaDAOJDBC implements RutaDAO, Serializable {
    private static final String dbTable="Rutas";
    private static final String[] autoField={"id"}; //Autogenerated field for new records
    private static final String SQL_BUSCAID="SELECT * FROM Rutas where id=?";
    private static final String SQL_BUSCATODOS="SELECT * FROM Rutas";
    private static final String SQL_CREA="INSERT INTO Rutas (nombre, tipo, fecha, origen, destino, valoracion, distancia, nombrefichero)"
            + " VALUES (?,?,?,?,?,?,?,?)";
    private static final String SQL_ACTUALIZA="UPDATE Rutas set id=?, nombre=?, tipo=?, fecha=?, origen=?, destino=?, valoracion=?, distancia=?, nombrefichero=? WHERE id=?";
    private static final String SQL_BORRA="DELETE FROM Rutas WHERE id=?";
    private static final String SQL_GUARDAPUNTOS = "INSERT INTO PUNTOSRUTA (id_ruta, lat, lon) VALUES (?,?,?)";
    private static final String SQL_GETPUNTOS = "SELECT * FROM PUNTOSRUTA WHERE id_ruta = ?";
    private static final String SQL_GETPOPULARES = "SELECT * FROM RUTAS ORDER BY valoracion DESC";
    private static final String SQL_ACTUALIZAVALORACION = "UPDATE rutas SET valoracion = ? WHERE id = ?";
    private static final String SQL_INSERTAUSUARIORUTA = "INSERT INTO USUARIORUTA (ID_USUARIO,ID_RUTA) VALUES (?,?)";
    private static final String SQL_ACTUALIZARBORRAR = "UPDATE USUARIORUTA set ID_USUARIO = 1 WHERE ID_USUARIO = ?";
    private static final String SQL_GETPARTICIPANTES = "SELECT ID_USUARIO FROM USUARIORUTA WHERE ID_RUTA = ?";
   
    @Resource(lookup="jdbc/rutas")
    private DataSource ds;
    
    public RutaDAOJDBC() {
        if(ds == null){
            try{
                Context context = new InitialContext();
                ds = (DataSource) context.lookup("jdbc/rutas");
            }catch(Exception ex){
                 Logger.getLogger("MensajeDAOJDBC").log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
    }
    
    private static Ruta rutaMapper(ResultSet rs) throws SQLException {
        Ruta r;
        r = new Ruta (
                rs.getInt("id"),
                rs.getString("nombre"),
                rs.getDate("fecha"),
                rs.getString("origen"),
                rs.getString("destino"),                
                rs.getFloat("valoracion"),
                rs.getFloat("distancia"),
                rs.getString("nombrefichero")
        );
        return r;
    }  
    
    @Override
    public void actualizaValoracion(int id, int nuevaValoracion, float viejaValoracion){
        float media = (nuevaValoracion + viejaValoracion) / 2;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_ACTUALIZAVALORACION);
        ){
            stmn.setFloat(1, media);
            stmn.setInt(2,id);
            stmn.executeUpdate();  
        }catch(Exception ex){
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }
    
    private static GeoPoint geoMapper(ResultSet rs) throws SQLException{
        GeoPoint g;
        g = new GeoPoint (
                rs.getString("lat"),
                rs.getString("lon")
        );
        return g;
    }
   
    @Override
    public List<GeoPoint> getPuntos(int identificador){
        List<GeoPoint> l=new ArrayList<>();
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_GETPUNTOS);
        ){
            stmn.setInt(1,identificador);
            try( ResultSet rs=stmn.executeQuery()) {
                while(rs.next()){
                    l.add(geoMapper(rs));        
                }
            }
                         
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return l;
    }
    
    @Override
    public List<Ruta> getPopulares(){
        List<Ruta> rutas= new ArrayList<Ruta>();
        
        try (Connection conn=ds.getConnection();
            Statement stmn=conn.createStatement();
            
        ){
            //limito a las 4 m√°s populares
            stmn.setMaxRows(4); 
            ResultSet rs=stmn.executeQuery(SQL_GETPOPULARES);
            while (rs.next()) {
                rutas.add(rutaMapper(rs));
            }                
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        
        return rutas;
    }
    
    @Override
    public boolean guardaPuntos(List<GeoPoint> lista, int identificador){
         boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_GUARDAPUNTOS);
        ){
            for(GeoPoint geo: lista){
                stmn.setInt(1, identificador);
                stmn.setString(2, geo.getLatitud());
                stmn.setString(3, geo.getLongitud());
                stmn.executeUpdate();
            }
            result = true;
        }catch(Exception ex){
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            result = false;
        }
        return result;
    }
    
    @Override
    public Ruta buscaId(Integer id) {
        Ruta r=null;
        try (Connection conn=ds.getConnection();
             PreparedStatement stmn=conn.prepareStatement(SQL_BUSCAID)) {
            stmn.setInt(1,id);
            try( ResultSet rs=stmn.executeQuery()) {
                rs.next();
                r=rutaMapper(rs);                
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return r;
    }

    @Override
    public List<Ruta> buscaTodos() {
        List<Ruta> l=new ArrayList<>();
        try (Connection conn=ds.getConnection();
            Statement stmn=conn.createStatement();
            ResultSet rs=stmn.executeQuery(SQL_BUSCATODOS);
        ){
            while (rs.next()) {
                l.add(rutaMapper(rs));
            }                
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return l;
    }


    @Override
    public boolean crea(Ruta r, int id_usuario) {
        boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_CREA,autoField);
            PreparedStatement stmn2 = conn.prepareStatement(SQL_INSERTAUSUARIORUTA);
        ){
            stmn.setString(1,r.getNombre());
            stmn.setString(2,r.getTipo());
            java.util.Date utilStartDate = r.getFecha();
            java.sql.Date sqlStartDate = new java.sql.Date(utilStartDate.getTime());
            stmn.setDate(3, sqlStartDate);
            stmn.setString(4, r.getOrigen());
            stmn.setString(5, r.getDestino());
            stmn.setFloat(6, r.getValoracion());
            stmn.setFloat(7, r.getDistancia());
            stmn.setString(8, r.getNombreFichero());
            stmn.executeUpdate();
            try (ResultSet rs=stmn.getGeneratedKeys()) {
                //Get autogenerated field value
                if (rs!=null && rs.next()) {
                    int nuevoId=rs.getInt(1); //RS has only one field with key value
                    r.setId(nuevoId);
                }
            } catch (Exception ex) {
                Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
            //una vez tengo el id de la ruta
            stmn2.setInt(1,id_usuario);
            stmn2.setInt(2,r.getId());
            stmn2.executeUpdate();
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }

    @Override
    public boolean guarda(Ruta r) {
        boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_ACTUALIZA);
        ){
            stmn.setString(1,r.getNombre());
            stmn.setString(2,r.getTipo());
            stmn.setDate(3, (Date) r.getFecha());
            stmn.setString(4, r.getOrigen());
            stmn.setString(5, r.getDestino());
            stmn.setFloat(6, r.getValoracion());
            stmn.setFloat(7, r.getDistancia());
            stmn.setString(8, r.getNombreFichero());
            stmn.setInt(9, r.getId());
            result=(stmn.executeUpdate()==1);
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }
    
    @Override
    public boolean actualizaParaBorrar(int idUsuario){
        boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_ACTUALIZARBORRAR);
        ){
            stmn.setInt(1,idUsuario);
            result=(stmn.executeUpdate()==1);
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }         
        return result;
    }
    
    @Override    
    public boolean borra(Integer id) {
        boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_BORRA);
        ){
            stmn.setInt(1,id);
            result=(stmn.executeUpdate()==1);
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }         
        return result;
    }

    @Override
    public boolean crea(Ruta c) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<Integer> getIdParticipantes(int id_ruta) {
        List<Integer> identificadores = new ArrayList<Integer>();
        try (Connection conn=ds.getConnection();
             PreparedStatement stmn=conn.prepareStatement(SQL_GETPARTICIPANTES)) {
            stmn.setInt(1,id_ruta);
            try( ResultSet rs=stmn.executeQuery()) {
                while(rs.next())
                    identificadores.add(new Integer(rs.getInt("id_usuario")));                
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return identificadores;
    }

    @Override
    public void unirseRuta(int id_ruta, int id_usuario) {
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn2 = conn.prepareStatement(SQL_INSERTAUSUARIORUTA);
        ){
            stmn2.setInt(1,id_usuario);
            stmn2.setInt(2,id_ruta);
            stmn2.executeUpdate();
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

}
